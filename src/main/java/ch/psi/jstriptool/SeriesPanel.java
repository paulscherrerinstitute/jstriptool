package ch.psi.jstriptool;

import java.awt.Color;
import java.awt.Font;
import javax.swing.BorderFactory;

/**
 *
 */
public class SeriesPanel extends javax.swing.JPanel {

    final PlotSeries series;
    final Color textBackground;
    final Color panelBackground;
    String currentDisplayValue;
    static SeriesPanel active;

    /**
     * Creates new form SeriesPanel
     */
    public SeriesPanel(PlotSeries series) {
        initComponents();
        this.series = series;
        textBackground = textName.getBackground();
        panelBackground = getBackground();
        initialize();
        Font f = textName.getFont().deriveFont(11.0f);

        textName.setFont(f);
        textRange.setFont(f);
        textValue.setFont(f);
        textDesc.setFont(f);
        /*
       Insets margin = new Insets(0,0,0,0);
        textName.setMargin(margin);
        textRange.setMargin(margin);
        textValue.setMargin(margin);
        textDesc.setMargin(margin);
         */
    }

    void updateBorder() {
        if (this == active) {
            setBorder(BorderFactory.createLineBorder(series.getColor(), 2));
        } else {
            setBorder(BorderFactory.createLineBorder(panelBackground, 2));
        }
    }

    public void initialize() {
        textName.setText(series.getName());
        if (series.isFixedRange()) {
            textRange.setText(String.format(("%s, %s"),
                    getDisplayRange(series.getRangeMin()),
                    getDisplayRange(series.getRangeMax())));
        } else {
            textRange.setText("");
        }
        textDesc.setText(series.desc == null ? "" : series.desc);
        textName.setForeground(series.getColor());
        textRange.setForeground(series.getColor());
        textValue.setForeground(series.getColor());
        textDesc.setForeground(series.getColor());
        updateBorder();
    }

    void setActive() {
        if (this != active) {
            SeriesPanel former = active;
            active = this;
            if ((former != null) && former.isShowing()) {
                former.updateBorder();
            }
            updateBorder();
        }
    }

    public void update() {
        try {
            String displayValue;
            TimestampedValue tval = series.getLastValue();
            if ((tval == null) || (tval.getValue() == null)) {
                displayValue = "";
            } else {
                displayValue = getDisplayValue(tval.getValue().doubleValue());
            }
            if (!displayValue.equals(currentDisplayValue)) {
                textValue.setText(displayValue);
                currentDisplayValue = displayValue;
            }
        } catch (Exception ex) {

        }
    }

    String getDisplayRange(Double value) {
        if ((value == null) || Double.isNaN(value)) {
            return "";
        }
        return series.toString(value, true, false);
    }

    String getDisplayValue(double value) {
        if (Double.isNaN(value)) {
            return "";
        }
        return series.toString(value, true, true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textName = new javax.swing.JTextField();
        textRange = new javax.swing.JTextField();
        textValue = new javax.swing.JTextField();
        textDesc = new javax.swing.JTextField();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        textName.setEditable(false);
        textName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        textRange.setEditable(false);
        textRange.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textRange.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        textValue.setEditable(false);
        textValue.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textValue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        textDesc.setEditable(false);
        textDesc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textDesc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textName)
            .addGroup(layout.createSequentialGroup()
                .addComponent(textRange, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textValue, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
            .addComponent(textDesc)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(textName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addComponent(textDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        setActive();
        PlotFrame.instance.setActive(series);
    }//GEN-LAST:event_formMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField textDesc;
    private javax.swing.JTextField textName;
    private javax.swing.JTextField textRange;
    private javax.swing.JTextField textValue;
    // End of variables declaration//GEN-END:variables
}
