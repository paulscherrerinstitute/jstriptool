plugins {
    id 'java-library'
    id "maven-publish"
    id "nebula.ospackage" version "8.4.2"
}


version = '1.2.0' 
group = 'ch.psi'
ext.timestamp = new Date().format("yyMMddHHmm")
sourceCompatibility = '1.11'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'ch.psi.jstriptool.App'
}

if (!hasProperty('runArgs')) {
    ext.arguments = ''
} else {
    ext.arguments = runArgs.split (" ")
} 

task(debug, dependsOn: 'classes', type: JavaExec) {      
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args arguments
    ignoreExitValue = true
    debug true
}

task(run, dependsOn: 'classes', type: JavaExec) {      
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    args arguments 
    ignoreExitValue = true
    debug false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar, dependsOn: jar) {
    classifier 'fat'
    duplicatesStrategy = 'exclude'  
    manifest {
        attributes (
            'Main-Class': mainClass,
            'Implementation-Version': version,
            'Build-Time': timestamp,
            //,'Class-Path': configurations.compile.collect { it.getName() }.join(' ')
        )
    }    
    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } } 
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'     
        
    with jar
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.epics:ca:1.3.2'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.jfree:jfreechart:1.0.19'
    compile 'com.formdev:flatlaf:1.6'
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

def app_name = project.name
def app_path = '/opt/' + project.name + "/" + version
def jar_file = app_path + '/lib/' + fatJar.archiveName
def sys_bin ='/usr/local/bin/'
def sys_lib ='/usr/local/lib/'

task generateRpm(type: Rpm) {
    //Commented as is being executed in clean+build
    //dependsOn 'clean' 
    //dependsOn 'fatJar' 

    packageName project.name
    requires 'java-11-openjdk'
    release = 1
    //version '1.0.0'    
    arch 'noarch'
    os LINUX
  
    user='root'
    permissionGroup 'root'
    addParentDirs false

    directory(app_path, 755)
    directory(app_path + '/lib', 755)
    directory(app_path + '/bin', 755)
    
    into app_path  

    from ('build/libs') {
        into 'lib'
        //include fatJar.archiveName
        fileMode 0644
    }

    from('scripts') {
        into 'bin'
        //Add version to startup script name
        rename { String fileName ->
            if (fileName == "startup"){
                app_name + "_" + version
            }
        }
        expand([
            "app_name": app_name,
            "app_version": version,
            "jar_file": jar_file
        ])
        fileMode 0755
    }

    link(sys_bin + app_name + "_" + version, app_path + '/bin/' + app_name + "_" + version)   
    link(sys_bin + app_name, sys_bin + app_name + "_" + version)   
}

publishing {
    repositories {
        maven {
            credentials {
                username artifactoryUser 
                password artifactoryPwd
            }
            url = artifactoryUrlRel
        }
    }

    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact generateRpm
            artifact fatJar
            groupId group
            artifactId project.name
            version version
        }
    }
}


